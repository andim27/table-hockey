//AS3 exporter version 2.2, generated by Away3D: http://www.away3d.com
package katok
{
	import away3d.containers.ObjectContainer3D;
	import away3d.containers.Scene3D;
	import away3d.core.math.*;
	import away3d.materials.*;
	import away3d.core.base.*;
	import away3d.core.utils.Init;
	import away3d.loaders.utils.*;
	import away3d.loaders.data.*;
	import flash.utils.Dictionary;
	import away3d.primitives.*;

	public class VorotaMesh extends ObjectContainer3D
	{
		private var objs:Object = {};
		private var geos:Array = [];
		private var oList:Array =[];
		private var aC:Array;
		private var aV:Array;
		private var aU:Array;
		private var _scale:Number;

		public function VorotaMesh(init:Object = null)
		{
			var ini:Init = Init.parse(init);
			_scale = ini.getNumber("scaling", 1);
			setSource();
			addContainers();
			buildMeshes();
			buildMaterials();
			cleanUp();
		}

		private function buildMeshes():void
		{			var m0:MatrixAway3D = new MatrixAway3D();
			m0.sxx = 1;
			m0.sxy = 0;
			m0.sxz = 0;
			m0.tx = -0.6379799842834473*_scale;
			m0.syx = 0;
			m0.syy = 1;
			m0.syz = 0;
			m0.ty = 3.095373895019293*_scale;
			m0.szx = 0;
			m0.szy = 0;
			m0.szz = 1;
			m0.tz = -3.827144905924797*_scale;

			objs.obj0 = {name:"vorota",  transform:m0, pivotPoint:new Number3D(-0.6379799842834473,3.095373895019293,-3.827144905924797), container:0, bothsides:false, material:null, ownCanvas:false, pushfront:false, pushback:false};
			objs.obj0.geo=geos[0];

			var ref:Object;
			var mesh:Mesh;
			var j:int;
			var av:Array;
			var au:Array;
			var v0:Vertex;
			var v1:Vertex;
			var v2:Vertex;
			var u0:UV;
			var u1:UV;
			var u2:UV;
			var aRef:Array ;
			for(var i:int = 0;i<1;++i){
				ref = objs["obj"+i];
				if(ref != null){
					mesh = new Mesh();
					mesh.type = ".as";
					mesh.bothsides = ref.bothsides;
					mesh.name = ref.name;
					mesh.pushfront = ref.pushfront;
					mesh.pushback = ref.pushback;
					mesh.ownCanvas = ref.ownCanvas;
					if(aC[ref.container]!= null)
						aC[ref.container].addChild(mesh);

					oList.push(mesh);
					mesh.transform = ref.transform;
					mesh.movePivot(ref.pivotPoint.x, ref.pivotPoint.y, ref.pivotPoint.z);
					if (ref.geo.geometry != null) {
						mesh.geometry = ref.geo.geometry;
						continue;
					}
					ref.geo.geometry = new Geometry();
					mesh.geometry = ref.geo.geometry;
					aRef = ref.geo.f.split(",");
					for(j = 0;j<aRef.length;j+=6){
						try{
							av = ref.geo.aV[parseInt(aRef[j], 16)].split("/");
							v0 = new Vertex(Number(parseFloat(av[0]))*_scale, Number(parseFloat(av[1]))*_scale, Number(parseFloat(av[2]))*_scale);
							av = ref.geo.aV[parseInt(aRef[j+1],16)].split("/");
							v1 = new Vertex(Number(parseFloat(av[0]))*_scale, Number(parseFloat(av[1]))*_scale, Number(parseFloat(av[2]))*_scale);
							av = ref.geo.aV[parseInt(aRef[j+2],16)].split("/");
							v2 = new Vertex(Number(parseFloat(av[0]))*_scale, Number(parseFloat(av[1]))*_scale, Number(parseFloat(av[2]))*_scale);
							au = ref.geo.aU[parseInt(aRef[j+3],16)].split("/");
							u0 = new UV(parseFloat(au[0]), parseFloat(au[1]));
							au = ref.geo.aU[parseInt(aRef[j+4],16)].split("/");
							u1 = new UV(parseFloat(au[0]), parseFloat(au[1]));
							au = ref.geo.aU[parseInt(aRef[j+5],16)].split("/");
							u2 = new UV(parseFloat(au[0]), parseFloat(au[1]));
							ref.geo.geometry.addFace( new Face(v0, v1, v2, ref.material, u0, u1, u2) );
						}catch(e:Error){
							trace("obj"+i+": ["+aV[parseInt(aRef[j],16)].split("/")+"],["+aV[parseInt(aRef[j+1],16)].split("/")+"],["+aV[parseInt(aRef[j+2],16)].split("/")+"]");
							trace("     uvs: ["+aV[parseInt(aRef[j+3],16)].split("/")+"],["+aV[parseInt(aRef[j+4],16)].split("/")+"],["+aU[parseInt(aRef[j+5],16)].split("/")+"]");
						}
					}
				}
			}
		}

		private function setSource():void
		{
			var geo0:Object = {};
			geo0.aVstr="5.1e51/6.03ba/-3.1ca1,5.1e51/0.03ba/-0.8df,-7.096/0.03ba/-0.8df,-7.096/6.03ba/-3.1ca1,5.1e51/6.03ba/-7.10af,5.1e51/0.03ba/-7.10af,-7.096/0.03ba/-7.10af,-7.096/6.03ba/-7.10af,5.db7/6.03ba/-7.10af,5.db7/0.03ba/-7.10af,-7.096/5.1f05/-7.10af,5.1eaa/5.1f05/-7.10af,-6.2026/0.594/-2.59c,5.152d/0.cbb/-2.af0,5.db6/3.1b5f/-2.1146,-7.08d/3.1640/-2.bf2,-6.1dae/0.46f/-7.10af,-6.1dae/6.0106/-7.10af,-7.0262/6.0106/-7.10af,-7.0262/0.415/-7.10af,5.152d/0.cbb/-7.c19,5.db6/5.138d/-7.caa,-7.08d/5.108b/-7.98d,-6.2026/0.594/-7.922";
			geo0.aUstr="0/0,0.140f2bb423e3f7/0,0.141ad2515d320e/1.003b63f2ff796f,-0.0002078c8062efe12/1.003b63f2ff796f,0.14f6151cbeb8ae/0,0.214f64a8d6e4f/1.007dd0e6f75db,-0.0002078c8062efe12/1.007dd0e6f75db,0.13753d2b8a6b0f/0,0.13753d2b8a6b0f/1,0/1,0.1429a31e0330a9/0,0.1435475f466554/1.003a3e92a17a97,-0.0002078c8062efe12/1.003a3e92a17a97,0.13f0625e83ce7f/0,0.13fa0d5578ebba/1.006684c8bc550,-0.0026f92818047dea/1.002f7c1c05122c,0.1f349be148ff9/0.0751809040208a8,-0.0002078c8062efe12/0.0751809040208a8,0.1f349be148ff9/0.07d89e7631df7f0,0.0040faa85f5a7d48/0.0be7e60d89e1f5,0.640f19ae7b2cf0/0.019ff9758cac925,0.10dbae049edf0a/0.11a86a896cf37b,0.6cbb2ccead1668/0.20ed6348d573fc,0.019ff9758cac925/0.11de858a5df319,0.9c98a2b27fa62/0.019ff9758cac925,0.6ba36a66d46210/0.20ed6348d573fc";
			geo0.aV= read(geo0.aVstr).split(",");
			geo0.aU= read(geo0.aUstr).split(",");
			geo0.f="0,1,2,0,1,2,0,2,3,0,2,3,0,4,5,0,4,5,0,5,1,0,5,6,1,5,6,0,7,8,1,6,2,0,8,9,2,6,7,0,a,b,2,7,3,0,b,c,4,0,3,0,d,e,4,3,7,0,e,f,5,4,8,0,7,10,5,8,9,0,10,11,4,7,a,0,7,12,4,a,b,0,12,13,c,d,e,14,15,16,c,e,f,14,16,17,10,11,12,0,7,12,10,12,13,0,12,13,e,d,14,18,15,16,e,14,15,18,16,17,c,f,16,14,15,19,c,16,17,14,19,17";
			geos.push(geo0);
		}
		private function buildMaterials():void
		{			materialLibrary = new MaterialLibrary();
			var mData_0:MaterialData = materialLibrary.addMaterial("Materialvoro");
			mData_0.materialType = "textureMaterial";
			mData_0.ambientColor = 6710886;
			mData_0.diffuseColor = 13421772;
			mData_0.shininess = NaN;
			mData_0.specularColor = 16777215;
			mData_0.textureFileName = "vorota_uv_2.";
			var mElements_0:Array = mData_0.elements;
			mElements_0.push(geos[0].geometry.faces[0]);
			mElements_0.push(geos[0].geometry.faces[1]);
			mElements_0.push(geos[0].geometry.faces[2]);
			mElements_0.push(geos[0].geometry.faces[3]);
			mElements_0.push(geos[0].geometry.faces[4]);
			mElements_0.push(geos[0].geometry.faces[5]);
			mElements_0.push(geos[0].geometry.faces[6]);
			mElements_0.push(geos[0].geometry.faces[7]);
			mElements_0.push(geos[0].geometry.faces[8]);
			mElements_0.push(geos[0].geometry.faces[9]);
			mElements_0.push(geos[0].geometry.faces[10]);
			mElements_0.push(geos[0].geometry.faces[11]);
			mElements_0.push(geos[0].geometry.faces[12]);
			mElements_0.push(geos[0].geometry.faces[13]);
			mElements_0.push(geos[0].geometry.faces[14]);
			mElements_0.push(geos[0].geometry.faces[15]);
			mElements_0.push(geos[0].geometry.faces[16]);
			mElements_0.push(geos[0].geometry.faces[17]);
			mElements_0.push(geos[0].geometry.faces[18]);
			mElements_0.push(geos[0].geometry.faces[19]);
			mElements_0.push(geos[0].geometry.faces[20]);
			mElements_0.push(geos[0].geometry.faces[21]);
			

		}
		private function cleanUp():void
		{
			for(var i:int = 0;i<1;++i){
				objs["obj"+i] == null;
			}
			aV = null;
			aU = null;
		}

		private function addContainers():void
		{
			aC = [];
						aC.push(this);
			var m0:MatrixAway3D = new MatrixAway3D();
			m0.sxx = 1;
			m0.sxy = 0;
			m0.sxz = 0;
			m0.tx = 30*_scale;
			m0.syx = 0;
			m0.syy = 1;
			m0.syz = 0;
			m0.ty = 1*_scale;
			m0.szx = 0;
			m0.szy = 0;
			m0.szz = 1;
			m0.tz = 117*_scale;
			transform = m0;

		}

		public function get containers():Array
		{
			return aC;
		}


		public function get meshes():Array
		{
			return oList;
		}


		private function read(str:String):String
		{
			var start:int= 0;
			var chunk:String;
			var end:int= 0;
			var dec:String = "";
			var charcount:int = str.length;
			for(var i:int = 0;i<charcount;++i){
				if (str.charCodeAt(i)>=44 && str.charCodeAt(i)<= 48 ){
					dec+= str.substring(i, i+1);
				}else{
					start = i;
					chunk = "";
					while(str.charCodeAt(i)!=44 && str.charCodeAt(i)!= 45 && str.charCodeAt(i)!= 46 && str.charCodeAt(i)!= 47 && i<=charcount){
						i++;
					}
					chunk = ""+parseInt("0x"+str.substring(start, i), 16 );
					dec+= chunk;
					i--;
				}
			}
			return dec;
		}

	}
}